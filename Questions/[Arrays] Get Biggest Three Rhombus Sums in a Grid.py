# Question: https://leetcode.com/problems/get-biggest-three-rhombus-sums-in-a-grid/
# Medium
from typing import Optional, List

class Solution:
    # O(ROWS * COLS * min(ROWS, COLS)) time
    # the idea is to generate all possible rhombuses and filter out the top 3
    # rhombus are being generated by expanding from a point
    # in both diagonal directions as far as possible
    # and then converging back to form the rhombus
    # we try to generate rhombus from every point in the grid
    def getBiggestThree(self, grid: List[List[int]]) -> List[int]:
        rsums = []
        ROWS = len(grid)
        COLS = len(grid[0])
        
        for row in range(ROWS):
            for col in range(COLS):
                sum_ = grid[row][col]
                rsums.append(sum_)
                distance = 1
                
                while (
                    row + distance < ROWS and
                    col - distance >= 0 and
                    col + distance < COLS
                ):
                    # diverge
                    left  = col - distance
                    right = col + distance
                    down  = row + distance
                    
                    sum_ += grid[down][left] + grid[down][right]
                    current = 0
                    while True:
                        # converge
                        left += 1
                        right -= 1
                        down += 1
                        
                        # invalid
                        if any([left == 0, right == COLS, down == ROWS]):
                            break
                            
                        # formed a rhombus
                        if left == right:
                            current += grid[down][left]
                            rsums.append(sum_ + current)
                            break
                        
                        current += grid[down][left] + grid[down][right]
                    distance += 1
        
        rsums = list(set(rsums))
        rsums.sort()
        return sorted(rsums[-3:], reverse=True)


# January 10, 2023

'''

# Kunal Wadhwa

'''